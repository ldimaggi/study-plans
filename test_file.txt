**CY 2017 Goals**

- JavaScript
- Go Language
- Containers
- Agile
- DevOps
- Dev Tools
- Microservices
- QE Certification
- Learning from Google
- SCM
- github

Resources

- JavaScript
    - https://github.com/getify/You-Dont-Know-JS
    - http://exploringjs.com/es6/
    - Build systems - grub and gulp
    - Package managers - bower and npm
    - Test tools - Protractor, chai, sinon, Jasmine
    - Runtimes - Node.js, Electron
    - Frameworks - Angular2
    - http://benediktmeurer.de/2016/12/16/the-truth-about-traditional-javascript-benchmarks/

- Go Language
    - https://golang.org
    - API generation - https://github.com/goadesign/goa
    - https://github.com/Masterminds/glide
    - https://github.com/DATA-DOG/godog/tree/master/examples/api
    - http://www.golangbootcamp.com/
- Containers
    - Vagrant/Virtualbox
    - Docker
    - Fabric8, Kubernetes - https://www.youtube.com/watch?v=bERRJksRB1A, http://fabric8.io/guide/getStarted/gofabric8.html
    - OpenShift, MiniShift
    - OpenStack
    - Ansible
- Microservices
    - NetFlix APIs
- Agile
    - Scrum, Canberra
- DevOps
    - https://github.com/redhat-helloworld-msa/helloworld-msa
    - https://pnt.redhat.com/pnt/p-1695673/duplicate_Con...o_Reality.pdf?nocache

    - Blue/Green Deployment, Canary Release, A/B Testing

- QE Certification
    - ISTQB
    - http://martinfowler.com/bliki/TestPyramid.html
- Dev Tools
    - Eclipse Che
    - https://projects.spring.io/spring-boot/ (OpenShift with Springboot), WildFLy Swarm
    - http://vertx.io/

- Learning from Google
    - https://github.com/jwasham/google-interview-university
    - https://testing.googleblog.com/
- SCM
    - Git
- github
    - https://github.com/ldimaggi/study-plans

Books

- [x] The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win

- [x] Scrum: a Breathtakingly Brief and Agile Introduction

- [x] Scrum: The Art of Doing Twice the Work in Half the Time

- [ ] Object Oriented JavaScript (Packt online)

- [ ] Learning Docker (Packt online)

- [ ] Continuous Delivery and DevOps: A Quickstart Guide (Packt online)

- [ ] Learning ECMAScript6 (Packt online)

- [ ] ProGit (online)

- [ ] https://github.com/opensourceway/open-org-leaders-manual

- [ ] https://github.com/opensourceway/open-org-field-guide

- [ ] https://github.com/opensourceway/catalyst-in-chief[ ]

Daily Checks
https://www.packtpub.com/account/my-ebooks
https://www.packtpub.com/packt/offers/free-learning
https://testing.googleblog.com/

Testing in Go Lang

- https://golang.org/pkg/testing/ - the canonical doc
- https://github.com/stretchr/testify - Highly recommended test framework
- https://smartystreets.com/blog/tags/testing-in-go-series - Great series about testing in golang
- https://speakerdeck.com/mitchellh/advanced-testing-with-go and accompanying video https://www.youtube.com/watch?v=yszygk1cpEc
- http://blog.codeship.com/testing-in-go/ and accompanying video https://www.youtube.com/watch?v=v_wz6E3uFRg
- http://elliot.land/go-data-driven-parameterized-tests
- http://csfortheslothful.blogspot.in/2016/05/testing-in-go-from-ground-up-part-1.html
- https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742#.ektvkej1o
- http://jonathanmh.com/golang-unit-testing-for-absolute-beginners

http://www.eclipse.org/community/eclipse_newsletter/2016/december/article3.php

The role of the tester has been changing due to agile processes – and this is likely to continue. Testers are integrated team members and the whole team shares the responsibility for quality. Testers are growing into roles like test consultants, test coaches, test experts and also communication experts. The last point is especially relevant in my mind. As much as we might like to develop one, there is no formalized language that removes the need for discussion, questions, clarification and conversation amongst stakeholders, team members and users. We are already seeing testers working to improve team communication about quality and user expectations – and I see this trend continuing.
